
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the authenticated user is an administrator.
    // This relies on a specific email address for simplicity.
    function isAdmin() {
      // NOTE: For this to work, you will need to manually give a user an 'admin' role
      // or change this to check for a specific email address.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.plan == 'admin';
    }

    // Function to check if the authenticated user is an employee of a specific CA user.
    // This assumes a 'employees' subcollection where employee UIDs are stored under the CA's user document.
    function isEmployeeOf(caUserId) {
      return exists(/databases/$(database)/documents/users/$(caUserId)/employees/$(request.auth.uid));
    }

    // User document access rules
    match /users/{userId} {
      // Users can read/write their own user document.
      // Admins can read/write any user document.
      allow read, update: if request.auth.uid == userId || isAdmin();
      // Allow any authenticated user to create their own doc on first login
      allow create: if request.auth != null;
    }

    // Clients subcollection access rules
    match /users/{userId}/clients/{clientId} {
      // Allow read/write if:
      // 1. The user is the owner (userId).
      // 2. The user is an admin.
      // 3. The user is an employee of the owner (userId).
      allow read, write: if request.auth.uid == userId || isAdmin() || isEmployeeOf(userId);
    }

    // Employees subcollection access rules (for CA users to manage their employees)
    match /users/{caUserId}/employees/{employeeId} {
      // CA user can manage their own employees.
      // Admins can manage any employee.
      allow read, write: if request.auth.uid == caUserId || isAdmin();
    }
  }
}
